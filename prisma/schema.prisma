// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int         @id @default(autoincrement())
  publicId    String      @unique @default(uuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  name        String
  email       String      @unique
  password    String
  Client      Client?
  Shopkeepers Shopkeeper?
}

model Wallet {
  id             Int         @id @default(autoincrement())
  publicId       String      @unique @default(uuid())
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  currentBalance Float
  Client         Client?
  Shopkeepers    Shopkeeper?
}

model Client {
  id          Int           @id @default(autoincrement())
  publicId    String        @unique @default(uuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  cpf         String        @unique
  wallet      Wallet        @relation(fields: [walletId], references: [id])
  walletId    Int           @unique
  user        User          @relation(fields: [userId], references: [id])
  userId      Int           @unique
  Transaction Transaction[]
}

model Shopkeeper {
  id          Int           @id @default(autoincrement())
  publicId    String        @unique @default(uuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  cnpj        String        @unique
  wallet      Wallet        @relation(fields: [walletId], references: [id])
  walletId    Int           @unique
  user        User          @relation(fields: [userId], references: [id])
  userId      Int           @unique
  Transaction Transaction[]
}

// Transaction goes to client > shopkeeper
model Transaction {
  id           Int        @id @default(autoincrement())
  publicId     String     @unique @default(uuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  isAuthorized Boolean
  amount       Float
  client       Client     @relation(fields: [clientId], references: [id])
  clientId     Int
  shopkeeper   Shopkeeper @relation(fields: [shopkeeperId], references: [id])
  shopkeeperId Int
}
